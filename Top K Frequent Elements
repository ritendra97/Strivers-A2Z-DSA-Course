class Solution {
    
    class pair{
        int key;
        int value;

        pair(int key, int value){
            this.key = key;
            this.value = value;
        }
    }

    public int[] topKFrequent(int[] nums, int k) {
        
        Map<Integer, Integer> Fmap = new HashMap<Integer, Integer>();

        for(int i = 0;i<nums.length;i++){
            Fmap.put(nums[i], Fmap.getOrDefault(nums[i],0)+1);
        }

        PriorityQueue<pair> pq = new PriorityQueue<>(new Comparator<pair>(){
            public int compare(pair p1, pair p2){
                return p1.value-p2.value;
            }
        });

        for(int key : Fmap.keySet()){
            pq.offer(new pair(key,Fmap.get(key)));

            if(pq.size()>k){
                pq.poll();
            }
        }

        int[] ans = new int[k];
        for (int i = k - 1; i >= 0; --i) ans[i] = pq.poll().key; // most frequent ends up at front
        return ans;
    }
}
