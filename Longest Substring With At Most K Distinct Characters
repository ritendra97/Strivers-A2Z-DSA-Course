
import java.util.HashMap;
import java.util.Map;

public class LongestSubstringwithAtMostKDistinctCharacters {

    public static int kDistinctChar(String s, int k) {

        Map<Character, Integer> map = new HashMap<>();
        int j = 0;
        int max_length = Integer.MIN_VALUE;

        for (int i = 0; i < s.length(); i++) {

            map.put(s.charAt(i), map.getOrDefault(s.charAt(i), 0) + 1);
            if (map.size() == k) {
                max_length = Math.max(max_length, i - j + 1);
            }

            while (map.size() > k) {

                char c = s.charAt(j);
                if (map.containsKey(c) && map.get(c) > 1) {
                    map.put(c, map.get(c) - 1);
                } else {
                    map.remove(c);
                }

                j++;

                if (map.size() == k) {
                    max_length = Math.max(max_length, i - j + 1);
                }
            }
        }

        return max_length;
    }

    public static void main(String[] args) {
        String s = "abcddefg";
        int k = 3;
        System.err.println(kDistinctChar(s, k));
    }
}
