
import java.util.*;

public class MaximumSumCombination {

    public static void main(String[] args) {

        int nums1[] = {7, 3}, nums2[] = {1, 6}, k = 2;

    }

    private static List<Integer> MaximumCombinationSum(int nums1[], int nums2[], int k) {

        Arrays.sort(nums1);
        Arrays.sort(nums2);

        int n = nums1.length;

        PriorityQueue<int[]> maxHeap = new PriorityQueue<>((a, b) -> b[0] - a[0]);
        Set<String> visited = new HashSet<>();

        List<Integer> list = new ArrayList<>();

        maxHeap.offer(new int[] {nums1[n-1]+nums2[n-1],n-1,n-1});
        visited.add((n-1) + "," + (+n-1));

        while(k-->0 && !maxHeap.isEmpty()){
            int [] current = maxHeap.poll();

            int sum = current[0];
            int i = current[1];
            int j = current[2];

            list.add(sum);

            while(i-1>=0){
                String key1 = (i-1)+","+(j);
                if(!visited.contains(key1)){
                    maxHeap.add(new int[] {nums1[i-1]+nums2[j],i-1,j});
                    visited.add(key1);
                }
            }

            while(j-1>=0){
                String key2 = (i)+","+(j-1);
                if(!visited.contains(key2)){
                    maxHeap.add(new int[] {nums1[i]+nums2[j-1],i,j-1});
                    visited.add(key2);
                }
            }
        }

        return list;
    }
}
