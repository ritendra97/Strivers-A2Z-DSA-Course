// Best solutio beat both solution consider only this
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        
        if(matrix.length==0)
            return true;
        int n = matrix[0].length;
        int m = matrix.length;
        
        for(int i=0;i<m;i++){
            
            if(matrix[i][0]>target)
                continue;
            else{
                int l=0;
                int r=n-1;
            }
            while(l<=r){
               int mid = l+(r-l)/2;
              
               if(matrix[i][mid]==target)
                   return true;
               if(matrix[i][mid]<target)
                   l=mid+1;
               else
                   r=mid-1;
            }
        }
        return false;
        
    }
}
//Search element in a sorted matrix
// Searching in O(n) time
//Search in a row wise and column wise sorted matrix
import java.util.*;
public class Matrix 
{
	static void search(int mat[][], int n, int X) 
	{
		int i =0;
		int j=n-1;
		int count=0;
		while(i<n && j>=0)
		{
			if(mat[i][j]==X)
			{
				System.out.println(i+" "+j);
			}
			if(mat[i][j]>X)
				j--;
			else
				i++;
		}
	}
	public static void main(String[] args) 
	{
		int mat[][] = { { 10, 20, 30, 40 }, 
                { 15, 25, 35, 45 }, 
                { 27, 29, 37, 48 }, 
                { 32, 33, 39, 50 } }; 
        search(mat, 4, 29);
	}

}
// Time complexity O(logn)
//this is bit different as compare to row bise and column bise sorted
//Basically you need to divide it by col

import java.util.*;
public class Matrix 
 {
	public static void matSearch(int mat[][], int N, int M, int X)
    {
		  int low=0;
		  int high = M*N-1;
		  while(low<=high)
		  {
			  int mid = (low+(high-low)/2);
			  if(mat[mid/M][mid%M]==X)
				  System.out.print(mid/M+" "+mid%M);
			  if(mat[mid/M][mid%M]>X)
				  high=mid-1;
			  else
				  low=mid+1;
		  }
    }
	public static void main(String[] args) 
	{
		int N = 3, M = 3;
		int mat[][] = { {1, 5, 9},
                {14, 20, 21},
                {30, 34, 43} };   
		int X=14;
		matSearch(mat,N,M,X);
	}
}
