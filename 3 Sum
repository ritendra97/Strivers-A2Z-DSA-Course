//3 Sum

import java.util.ArrayList;

public class Main4 {

    public static void Helper(ArrayList<ArrayList<Integer>> result, int index, int n, ArrayList<Integer> curr, int arr[]){

        if(index>=arr.length) return;

        if(curr.size()==n){
            int sum=0;
            for(int i = 0;i<curr.size();i++){
                sum+=curr.get(i);
            }
            if(sum==0){
                result.add(new ArrayList<>(curr));
            }
            return;
        }

        curr.add(arr[index]);
        Helper(result,index+1,n,curr,arr);
        curr.remove(curr.size()-1);
        Helper(result,index+1,n,curr,arr);
    }
    public static  ArrayList<ArrayList<Integer>> Sum(int arr[]){
        ArrayList<ArrayList<Integer>> result = new ArrayList<>();
        Helper(result,0,3,new ArrayList<>(),arr);
        return result;
    }
    public static void main(String[] args){
        int arr[] = {-1,0,1,2,-1,-4};
        System.out.println(Sum(arr));
    }
}


public class ThreeSum {
    private static void printUniqueTriplets(int[] nums) {
        int n = nums.length;
        // Created a set of triplets to avoid duplicates
        HashSet<Triplet> triplets = new HashSet<>();
        
        // Use 3 nested loop to check all the possible combinations
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                for (int k = j + 1; k < n; k++) {
                    // If this triplet sums to zero, add it in the set
                    int sum = nums[i] + nums[j] + nums[k];
                    if (sum == 0) {
                        triplets.add(new Triplet(nums[i], nums[j], nums[k]));
                    }
                }
            }
        }
        // Print the unique triplets
        for (Triplet triplet : triplets) {
            System.out.println(triplet.ele[0] + " " + triplet.ele[1] + " "
                    + triplet.ele[2]);
        }
    }
    public static void main(String[] args) {
        // Example
        int nums[] = new int[]{-1, 0, 1, 2, -1, -4};
        printUniqueTriplets(nums);
    }
    // class representing a triplet
    static class Triplet {
        int ele[];
        public Triplet(int first, int second, int third) {
            ele = new int[3];
            ele[0] = first;
            ele[1] = second;
            ele[2] = third;
            // Store the triplets in ascending order, so that this could be used 
            // in checking duplicates
            Arrays.sort(ele);
        }
        
        // Two triplets are equal if elements in them are same 
        @Override
        public boolean equals(Object o) {
            Triplet t = (Triplet) o;
            return (Arrays.compare(ele, t.ele) == 0);
        }
        @Override
        public int hashCode() {
            return Arrays.hashCode(ele);
        }
    }
}

import java.util.Arrays;
import java.util.HashSet;
public class ThreeSum {
    private static void printUniqueTriplets(int[] nums) {
        int n = nums.length;
        Arrays.sort(nums);
        HashSet<Triplet> triplets = new HashSet<>();
        for (int i = 0; i < n; i++) {
            int req = -nums[i];
            int left = i + 1;
            int right = n - 1;
            while (left < right) {
                int sum = nums[left] + nums[right];
                if (sum == req) {
                    triplets.add(new Triplet(nums[i], nums[left], nums[right]));
                    // Check for more triplets
                    left++;
                    right--;
                } else if (sum < req) {
                    left++;
                } else {
                    right--;
                }
            }
        }
        // Print the unique triplets
        for (Triplet triplet : triplets) {
            System.out.println(triplet.ele[0] + " " + triplet.ele[1] + " "
                    + triplet.ele[2]);
        }
    }
    public static void main(String[] args) {
        int nums[] = new int[]{-1, 0, 1, 2, -1, -4};
        printUniqueTriplets(nums);
    }
    // class representing a triplet
    static class Triplet {
        int ele[];
        public Triplet(int first, int second, int third) {
            ele = new int[3];
            ele[0] = first;
            ele[1] = second;
            ele[2] = third;
            // Store the triplets in ascending order, so that this could be used
            // in checking duplicates
            Arrays.sort(ele);
        }
        // Two triplets are equal if elements in them are same
        @Override
        public boolean equals(Object o) {
            Triplet t = (Triplet) o;
            return (Arrays.compare(ele, t.ele) == 0);
        }
        @Override
        public int hashCode() {
            return Arrays.hashCode(ele);
        }
    }
}
