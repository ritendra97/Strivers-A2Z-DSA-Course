//Longest Palindromic Substring
TC-O(n^3)
class Solution {
    

    public boolean isPalindrome(String str){
        int i = 0;
        int j = str.length()-1;
        while(i<=j){
            if(str.charAt(i)!=str.charAt(j)){
                return false;
            }else{
                i++;
                j--;
            }
        }
        return true;
    }
    public String longestPalindrome(String s) {
        
        if(s==null || s.length()==0)
            return "";
        int max_len=0;
        String ans = "";
        int n = s.length();
        for(int i=0;i<n;i++) {
            
            for(int j=i;j<n;j++){
                
                String temp = s.substring(i,j+1);
                if(isPalindrome(temp)){
                    if(max_len<temp.length()){
                        max_len = temp.length();
                        ans = temp;
                    }
                }
            }
        }
        
        return ans;
    }
}

TC->O(n^2)
class Solution {
    
// Here i am going to use one or two pointers approach if we start at every character of the string   
// so basically we need to make it centre or assume it as a centre of possible palindrome and move       // towards both directionn of that character and see till where it is a palindrome and capture that 
// length and do this for all the Characters and find out which is the maximum length substring so at the // end we have to print the substring so meanwhile i will be capturing the index of that substring so at // the end i will provide the answer the only catch here the string could be the even length and the odd // length so for every character we have to treat that character as a centre and next of that character // as a centre so we are not taking care of even length but odd length as well. 
    
     public String longestPalindrome(String s) {
         
         if (s == null || s.length() < 1) return "";
         int start = 0, end = 0;
         
         for (int i = 0; i < s.length(); i++) {
             
              int len1 = expandAroundCenter(s, i, i);
              int len2 = expandAroundCenter(s, i, i + 1);
              int len = Math.max(len1, len2);
              if (len > end - start) {
                  start = i - (len - 1) / 2;
                  end = i + len / 2;
              }
         }
         return s.substring(start, end + 1);
    }

    private int expandAroundCenter(String s, int left, int right) {
        
        int L = left, R = right;
        while (L >= 0 && R < s.length() && s.charAt(L) == s.charAt(R)) {
            L--;
            R++;
        }
        
        return R - L - 1;
   }
}
